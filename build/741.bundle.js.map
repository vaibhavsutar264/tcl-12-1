{"version":3,"file":"741.bundle.js","mappings":"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","sources":["webpack://tclcpasstwentyfirstoct/./src/components/common/icons/bigCheck.tsx","webpack://tclcpasstwentyfirstoct/./src/components/common/elements/PrimaryInput.tsx","webpack://tclcpasstwentyfirstoct/./src/components/hook-form/FormProvider.tsx","webpack://tclcpasstwentyfirstoct/./src/hooks/useLocales.tsx","webpack://tclcpasstwentyfirstoct/./src/utils/yupschemas.ts"],"sourcesContent":["import { typeVar } from '../../../utils/constants'\n\nconst BigCheck = () => {\n  return (\n    <svg\n    id=\"big-check\"\n    data-name=\"big check\" type={typeVar.IMAGE_SVG} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"24px\" height=\"24px\"><path fill=\"#43A047\" d=\"M40.6 12.1L17 35.7 7.4 26.1 4.6 29 17 41.3 43.4 14.9z\"/></svg>\n  )\n}\n\nexport default BigCheck\n","import { FormControl, Box, IconButton, InputAdornment, InputLabel, TextField } from '@mui/material'\nimport useLocales from '../../../hooks/useLocales'\nimport MailOutlineIcon from '@mui/icons-material/MailOutline'\nimport LockOpenIcon from '@mui/icons-material/LockOpen'\nimport { useEffect, useState } from 'react'\nimport VisibilityOffOutlinedIcon from '@mui/icons-material/VisibilityOffOutlined'\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport { validateEmail } from '../../../utils/helpers'\nimport DoneIcon from '@mui/icons-material/Done';\nimport BigCheck from '../icons/bigCheck'\nimport ModerateCheck from '../icons/moderateCheck'\nimport CheckIcon from '@mui/icons-material/Check'\nimport LinearProgress from '@mui/material/LinearProgress'\nimport CloseIcon from '@mui/icons-material/Close'\nimport { makeStyles } from \"@material-ui/core/styles\";\nconst useStyles = makeStyles({\n  underline: {\n    \"&&&:before\": {\n      borderBottom: \"solid 1px\"\n    },\n    \"&&:after\": {\n      borderBottom: \"none !important\"\n    }\n  }\n});\nexport const PrimaryInput = ({ onChange, sxForInput, classNameInput, register, variantForInput, label, formState, fieldName, typeName, onInput, valueForInput, dataTestId, setpassword = false }: any) => {\n    const { t } = useLocales();\n    const classes = useStyles();\n    const [val, setVal] = useState('');\n    const [toolTipOpen, settoolTipOpen] = useState(false)\n    const [values, setValues] = useState<any>({ showPassword: (typeName == 'email' || 'text') ? true : false })\n    const getClassName = () => {\n        if (typeName == 'email') {\n            return \"input-wrapper yes-margin\";\n        } else if (typeName == 'password') {\n            return \"input-wrapper password-checkHide no-margin\"\n        }\n    }\n\n    useEffect(() => {\n        if (typeName === 'password') {\n            setValues({ ...values, showPassword: !values.showPassword })\n        }\n    }, [])\n\n    const iconstyle = { opacity: 0.5 }\n\n    const getIcon = () => {\n        if (typeName == 'email') {\n            return <MailOutlineIcon id=\"mail-icon\" style={iconstyle} />;\n        } else if (typeName == 'password') {\n            return <LockOpenIcon id=\"unlock-icon\" style={iconstyle} />;\n        } else {\n            return null\n        }\n    }\n    const handleClickShowPassword = () => {\n        setValues({ ...values, showPassword: !values.showPassword })\n    }\n\n    const handleMouseDownPassword = (event: React.MouseEvent<HTMLButtonElement>) => {\n        event.preventDefault()\n    }\n    const handlePasteChange = (e: any) => {\n        e.preventDefault()\n    }\n\n    const passStrengthPerc = () => {\n        let percent = 0;\n        if (`${val}`.length >= 5) {\n            percent = percent + 10\n        }\n        if (/[A-Z]/.test(val)) {\n            percent = percent + 20\n        }\n        if (/[a-z]/.test(val)) {\n            percent = percent + 20\n        }\n        if (/[@#&]/.test(val)) {\n            percent = percent + 20\n        }\n        if (`${val}`.length >= 8) {\n            percent = percent + 30\n        }\n        return percent;\n    }\n\n    const getbarColor = () => {\n        if (passStrengthPerc() > 80) {\n            return 'success'\n        } else if (passStrengthPerc() >= 60) {\n            return 'warning'\n        } else if (passStrengthPerc() <= 59) {\n            return 'error'\n        }\n    }\n\n    return (\n        <>\n            <FormControl\n                className={getClassName()}\n                data-margin={true}\n                id={fieldName}\n                sx={{\n                    display: 'flex',\n                    alignItems: 'flex-end',\n                    position: 'relative',\n                    width: 1,\n                    margin: '20px 0px',\n                }}\n            >\n                <InputLabel\n                    htmlFor={fieldName}\n                    id=\"label__icon\"\n                    className=\"label__icon\"\n                >\n                    {getIcon()}\n                </InputLabel>\n                <TextField\n                    spellcheck=\"false\"\n                    className={classNameInput}\n                    id={fieldName}\n                    defaultValue={valueForInput}\n                    onInput={(e: any) => {\n                        setVal(e.target.value);\n                        try {\n                            if (setpassword == true) {\n                                settoolTipOpen(true)\n                            } else {\n                                settoolTipOpen(false)\n                            }\n                            onInput(e.target.value);\n                        } catch { }\n                    }}\n                    onChange={onChange}\n                    label={t<string>(label)}\n                    variant={variantForInput}\n                    type={values.showPassword ? 'text' : 'password'}\n                    {...register}\n                    autoComplete=\"false\"\n                    onPaste={handlePasteChange}\n                    sx={sxForInput}\n                    InputProps={\n                        {\n                            ...(typeName === 'password') && {\n                                endAdornment: (\n                                    <InputAdornment position=\"end\">\n                                        <IconButton\n                                            className=\"password-toggle\"\n                                            aria-label=\"toggle password visibility\"\n                                            onClick={handleClickShowPassword}\n                                            onMouseDown={handleMouseDownPassword}\n                                            edge=\"end\"\n                                        >\n                                            {!values.showPassword ? (\n                                                <VisibilityOffOutlinedIcon />\n                                            ) : (\n                                                <VisibilityIcon />\n                                            )}\n                                        </IconButton>\n                                    </InputAdornment>\n                                ),\n                            },\n                            'data-testid': dataTestId,\n                            autoComplete: 'off',\n                            classes:classes\n                            // disableUnderline: true\n                        }\n                    }\n                />\n                {formState.touchedFields[fieldName] && formState.errors[fieldName] && (\n                    <p className=\"text-error\"> <span style={{ position: 'relative', top: '7px' }}><ErrorIcon /></span> {formState.errors[fieldName].message}</p>\n                )}\n                {toolTipOpen &&\n                    <div className=\"tooltipCustom\">\n                        <button\n                            onClick={() => { settoolTipOpen(false) }}\n                            id=\"tooltip-close\"\n                            type=\"button\"\n                            className=\"tooltipClose\"\n                        >{' '} <CloseIcon /></button>\n                        <div className=\"tooltipContent\">\n                            <p className=\"tooltipTitle\">Password must have</p>\n                            <ul className=\"tooltioList\">\n                                <li id=\"uppercase\" className=\"tooltipList-item\">\n                                    <span className=\"tooltip-icon\">\n                                        {/[A-Z]/.test(val) ? <BigCheck /> : <CheckIcon />}\n                                    </span>\n                                    <span className=\"tooltip-text\">Upper</span>\n                                </li>\n                                <li id=\"lowercase\" className=\"tooltipList-item\">\n                                    <span className=\"tooltip-icon\">\n                                        {/[a-z]/.test(val) ? <BigCheck /> : <CheckIcon />}\n                                    </span>\n                                    <span className=\"tooltip-text\">Lower Case</span>\n                                </li>\n                                <li id=\"symbol\" className=\"tooltipList-item\">\n                                    <span className=\"tooltip-icon\" >\n                                        {/[@#&]/.test(val) ? <BigCheck /> : <CheckIcon />}\n                                    </span>\n                                    <span className=\"tooltip-text\">Symbol (@#&)</span>\n                                </li>\n                                <li className=\"tooltipList-item\">\n                                    <span className=\"tooltip-icon\" id=\"atleastTick\">\n                                        {`${val}`.length >= 8 ? <BigCheck /> : <CheckIcon />}\n                                    </span>\n                                    <span className=\"tooltip-text\">\n                                        At least 8 characters\n                                    </span>\n                                </li>\n                            </ul>\n                            <Box sx={{ width: '100%', mr: 1 }}>\n                                <p className=\"tooltipTitle StrengthTitle\">\n                                    Password Strength:{' '}\n                                    {(passStrengthPerc() > 0 && passStrengthPerc() <= 60) && <span style={{ color: '#d32f2f' }}> Low  </span>}\n                                    {(passStrengthPerc() > 60 && passStrengthPerc() <= 80) && <span style={{ color: '#ed6c02' }}> Moderate  </span>}\n                                    {(passStrengthPerc() > 80 && passStrengthPerc() <= 100) && <span style={{ color: '#green' }}> High  </span>}\n                                </p>\n                                <LinearProgress\n                                    variant=\"determinate\"\n                                    color={getbarColor()}\n                                    value={passStrengthPerc()}\n                                />\n                            </Box>\n                        </div>\n                    </div>\n                }\n            </FormControl>\n        </>\n\n\n\n\n    )\n}\n","import React, { FC, ReactNode, useState } from 'react';\n// form\nimport { FormProvider as Form } from 'react-hook-form';\n\ninterface FormProviderProps {\n  children?: ReactNode;\n  methods?: any,\n  onSubmit: any\n}\n\nexport default function FormProvider({ children, onSubmit, methods }: FormProviderProps) {\n  return (\n    <Form {...methods}>\n      <form onSubmit={onSubmit}>{children}</form>\n    </Form>\n  );\n}\n","import { useTranslation } from 'react-i18next'\nimport { localStorageVar } from '../utils/constants'\nimport { getFromLocalStorage } from './useLocalStorage'\n\ntype LangType = [\n  {\n    value: any\n    label: any\n  },\n  {\n    value: any\n    label: any\n  }\n]\n\nconst LANGS: LangType = [\n  {\n    value: 'en',\n    label: 'English',\n  },\n  {\n    value: 'de',\n    label: 'German',\n  },\n]\n\nexport default function useLocales() {\n  const { i18n, t } = useTranslation()\n  const langStorage = getFromLocalStorage(localStorageVar.I18_LANG_VAR)\n  const currentLang = LANGS.find((_lang) => _lang.value === langStorage)\n\n  const handleChangeLanguage = (newlang: any) => {\n    i18n.changeLanguage(newlang)\n  }\n\n  return {\n    onChangeLang: handleChangeLanguage,\n    t,\n    currentLang,\n    allLang: LANGS,\n  }\n}\n","import * as Yup from 'yup'\nimport { validateEmail } from './helpers'\n\nexport const LoginFormSchema = Yup.object().shape({\n    user: Yup.string().test('emailTest', 'Please enter a valid email', validateEmail),\n    password: Yup.string().required(\"Please enter password\")\n})\nexport const AccountDetailsSchema = Yup.object().shape({\n    firstname: Yup.string().required(\"Please enter firstname\"),\n    lastName: Yup.string().required(\"Please enter lastname\"),\n    phoneNumber: Yup.string().required(\"Please enter phoneNumber\"),\n    communication: Yup.string().required(\"Please enter communication\"),\n    timezone: Yup.string().required(\"Please enter timezone\"),\n})\n\n\nexport const ForgotPasswordSchema = Yup.object().shape({\n    user: Yup.string().test('emailTest', 'Please enter a valid email', validateEmail),\n})\n\nexport const setPasswordSchema = Yup.object().shape({\n    newPass: Yup.string().required(\"Please enter password\")\n        .matches(/[A-Z]/, \"Password must contain atleast one uppercase\")\n        .matches(/[a-z]/, \"Password must contain atleast one lowercase\")\n        .matches(/[@#&]/, \"Password must contain special character @,#,&\")\n        .min(8, \"password must be at least 8 characters\"),\n    cnfPassword: Yup.string().required(\"Confirm password is required\")\n})\n\n\nexport const changePasswordSchema = Yup.object().shape({\n    oldPassword: Yup.string().required(\"old password is required\"),\n    newPass: Yup.string().required(\"Please enter password\")\n        .matches(/[A-Z]/, \"Password must contain atleast one uppercase\")\n        .matches(/[a-z]/, \"Password must contain atleast one lowercase\")\n        .matches(/[@#&]/, \"Password must contain special character @,#,&\")\n        .min(8, \"password must be at least 8 characters\"),\n    cnfPassword: Yup.string().required(\"Confirm password is required\")\n})"],"names":["id","type","typeVar","xmlns","viewBox","width","height","fill","d","useStyles","makeStyles","underline","borderBottom","PrimaryInput","onChange","sxForInput","classNameInput","register","variantForInput","label","formState","fieldName","typeName","onInput","valueForInput","dataTestId","setpassword","t","useLocales","classes","useState","val","setVal","toolTipOpen","settoolTipOpen","showPassword","values","setValues","useEffect","iconstyle","opacity","passStrengthPerc","percent","length","test","FormControl","className","sx","display","alignItems","position","margin","InputLabel","htmlFor","MailOutline","style","LockOpen","TextField","spellcheck","defaultValue","e","target","value","variant","autoComplete","onPaste","preventDefault","InputProps","endAdornment","InputAdornment","IconButton","onClick","onMouseDown","event","edge","Visibility","VisibilityOffOutlined","touchedFields","errors","top","Error","message","Close","Check","Box","mr","color","LinearProgress","FormProvider","children","onSubmit","methods","LANGS","useTranslation","i18n","langStorage","getFromLocalStorage","localStorageVar","onChangeLang","newlang","changeLanguage","currentLang","find","_lang","allLang","LoginFormSchema","Yup","shape","user","validateEmail","password","required","ForgotPasswordSchema","firstname","lastName","phoneNumber","communication","timezone","setPasswordSchema","newPass","matches","min","cnfPassword","changePasswordSchema","oldPassword"],"sourceRoot":""}