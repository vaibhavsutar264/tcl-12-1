{"version":3,"file":"522.bundle.js","mappings":"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","sources":["webpack://tclcpasstwentyfirstoct/./src/components/change-password/ChangePassword.tsx","webpack://tclcpasstwentyfirstoct/./src/components/common/elements/BreadCrum.tsx","webpack://tclcpasstwentyfirstoct/./src/components/modals/ModalPassChanged.tsx","webpack://tclcpasstwentyfirstoct/./src/utils/Base64EncodeDecode.tsx"],"sourcesContent":["import {  useState } from 'react'\r\nimport { BreadCrums } from '../common/elements/BreadCrum'\r\nimport {  breadCrums } from '../../utils/constants'\r\nimport {\r\n    useDispatch as useAppDispatch,\r\n    useSelector as useAppSelector,\r\n} from '../../redux/store'\r\nimport { Password } from '../../types/authType'\r\nimport { changePassword } from '../../redux/slices/authSlice'\r\nimport { Typography } from '@mui/material'\r\nimport {\r\n    Box,\r\n    styled,\r\n    Button,\r\n    ButtonProps,\r\n    FormGroup,\r\n    FormControl,\r\n} from '@mui/material'\r\nimport { FormProvider } from '../hook-form'\r\nimport { purple } from '@mui/material/colors'\r\nimport useLocales from '../../hooks/useLocales'\r\n\r\nimport { PrimaryInput } from '../common/elements/PrimaryInput'\r\nimport { useForm } from 'react-hook-form'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport { changePasswordSchema, ForgotPasswordSchema } from '../../utils/yupschemas'\r\nimport { base64Encode } from '../../utils/Base64EncodeDecode'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport ModalPassChanged from '../modals/ModalPassChanged'\r\n\r\nconst ColorButton = styled(Button)<ButtonProps>(({ theme }) => ({\r\n    color: theme.palette.getContrastText(purple[500]),\r\n    backgroundColor: purple[500],\r\n    height: '70px',\r\n    width: '100%',\r\n    borderRadius: '35px',\r\n    mixBlendMode: 'luminosity',\r\n    opacity: 0.5,\r\n    '&:hover': {\r\n        backgroundColor: purple[700],\r\n    },\r\n}))\r\n\r\n\r\nexport const ChangePassword = ({ toggleTheme }: { toggleTheme: any }) => {\r\n    const { dashBoardWidth } = useAppSelector((state: any) => state.common);\r\n    const navigate = useNavigate()\r\n    const [oldPassval, setOldPassVal] = useState('');\r\n    const [newPassval, setNewPassVal] = useState('');\r\n    const [cnfPass, setCnfPass] = useState('');\r\n    const [success, setSuccess] = useState(false)\r\n\r\n    const dispatch = useAppDispatch()\r\n    const { t } = useLocales()\r\n\r\n    const { register, handleSubmit, formState, control, getValues } = useForm<any>({\r\n        mode: \"onChange\",\r\n        resolver: yupResolver(changePasswordSchema),\r\n    });\r\n    const changePass = (d: any) => {\r\n        try {\r\n            const userPassword: Password = {\r\n                oldPassword: d.oldPassword,\r\n                newPassword: base64Encode(d.newPass),\r\n                username: null\r\n            }\r\n            dispatch(changePassword(userPassword))\r\n            setSuccess(true)\r\n\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n    const [open, setOpen] = useState<boolean>(false);\r\n\r\n    return (\r\n        <div >\r\n            <div className=\"dashboard__content\" style={{\r\n                marginLeft: `${dashBoardWidth}`, width: `calc(100% - ${dashBoardWidth}.split('p')[0]}px`\r\n            }}>\r\n                <div className=\"content__header\">\r\n                    <BreadCrums data={breadCrums.CHANGE_PASSWORD} />\r\n                </div>\r\n                <Typography\r\n                    className=\"helper__title\"\r\n                    variant=\"body1\"\r\n                    sx={{\r\n                        fontFamily: 'ubuntu',\r\n                        letterSpacing: 0,\r\n                        opacity: 0.6,\r\n                        mt: '20px',\r\n                    }}\r\n                >\r\n                    {t<string>('changePasswordInstruction')}\r\n                </Typography>\r\n\r\n                {/* form starts here */}\r\n                <Box sx={{ flexGrow: 1 }} id=\"login-form\" className=\"account__form change-password-form\">\r\n                    <div className=\"form__inner\">\r\n                        <Box\r\n                            sx={{ flexGrow: 1, paddingTop: '0 !important' }}\r\n                            className=\"account__form__body\"\r\n                        >\r\n                            <FormProvider onSubmit={handleSubmit((d) => changePass(d))}>\r\n                                <FormGroup>\r\n                                    {/* Email Input feilds */}\r\n                                    <PrimaryInput\r\n                                        register={{ ...register('oldPassword') }}\r\n                                        label={'oldPassword'}\r\n                                        classNameInput={\"input-field\"}\r\n                                        fieldName={'password'}\r\n                                        formState={formState}\r\n                                        typeName={'password'}\r\n                                        onInput={setOldPassVal}\r\n                                        variantForInput={\"standard\"}\r\n                                        sxForInput={{ width: 1, borderRadius: '10px !important', border: 'none !important' }}\r\n                                        dataTestId='old-password-element'\r\n                                    />\r\n                                    <PrimaryInput\r\n                                        register={{ ...register('newPass') }}\r\n                                        label={'password'}\r\n                                        classNameInput={\"input-field\"}\r\n                                        fieldName={'newPass'}\r\n                                        formState={formState}\r\n                                        typeName={'password'}\r\n                                        onInput={setNewPassVal}\r\n                                        setpassword={true}\r\n                                        variantForInput={\"standard\"}\r\n                                        sxForInput={{ width: 1, borderRadius: '10px !important', border: 'none !important' }}\r\n                                        dataTestId='new-password-element'\r\n                                    />\r\n                                    <PrimaryInput\r\n                                        register={{ ...register('cnfPassword') }}\r\n                                        label={'confirmPassword'}\r\n                                        classNameInput={\"input-field\"}\r\n                                        fieldName={'cnfPassword'}\r\n                                        formState={formState}\r\n                                        typeName={'password'}\r\n                                        onInput={setCnfPass}\r\n                                        variantForInput={\"standard\"}\r\n                                        sxForInput={{ width: 1, borderRadius: '10px !important', border: 'none !important' }}\r\n                                        dataTestId='confirm-password-element'\r\n                                    />\r\n                                    {/* submit button */}\r\n                                    <FormControl\r\n                                        className=\"input-wrapper submitBtn\"\r\n                                        sx={{\r\n                                            display: 'flex',\r\n                                            alignItems: 'flex-end',\r\n                                            position: 'relative',\r\n                                            width: 1,\r\n                                            marginTop: '50px',\r\n                                        }}\r\n                                    >\r\n                                        <ColorButton\r\n                                            variant=\"contained\"\r\n                                            id=\"btn-enable-style\"\r\n                                            data-testid=\"button-element\"\r\n                                            type=\"submit\"\r\n                                            name=\"submit\"\r\n                                            sx={{\r\n                                                fontSize: '18px',\r\n                                                lineHeight: '21px',\r\n                                                fontFamily: 'ubuntu',\r\n                                                letterSpacing: '-0.72px',\r\n                                            }}\r\n                                            className={`customBtn-01 ${((oldPassval !=\"\") && (newPassval != \"\") && (newPassval == cnfPass) && !formState.errors.newPass) ? 'btn-enable-style' : 'no-pointers'} `}\r\n                                            onClick={() => {\r\n                                                setOpen(true);\r\n                                            }}\r\n                                        >\r\n                                            {t<string>('done')}\r\n                                        </ColorButton>\r\n                                    </FormControl>\r\n                                </FormGroup>\r\n                            </FormProvider>\r\n                        </Box>\r\n                        <Button href='/forgot-password'>Forgot Password?</Button>\r\n                    </div>\r\n                </Box>\r\n            </div>\r\n            {success? <ModalPassChanged open={open} setOpen={setOpen} />:\"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChangePassword\r\n","import React, { useState } from 'react'\r\n\r\nimport Breadcrumbs from '@mui/material/Breadcrumbs'\r\nimport IconButton from '@mui/material/IconButton'\r\nimport InputBase from '@mui/material/InputBase'\r\nimport Link from '@mui/material/Link'\r\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext'\r\nimport Paper from '@mui/material/Paper'\r\nimport SearchIcon from '@mui/icons-material/Search'\r\nimport Stack from '@mui/material/Stack'\r\nimport Typography from '@mui/material/Typography'\r\nimport axios from \"axios\"\r\nimport useLocales from '../../../hooks/useLocales';\r\n\r\nexport const BreadCrums = ({ data }: { data: any }) => {\r\n    const { t } = useLocales();\r\n\r\n    return (\r\n        <div className=\"content__breadcrum\">\r\n            <Stack spacing={2} className=\"breadcrum-stack\">\r\n                <Breadcrumbs separator={<NavigateNextIcon fontSize=\"small\" />} aria-label=\"breadcrumb\" >\r\n                    {[\r\n                        data.path.map((ele: any) =>\r\n                            ele.type == 'link' ? <Link underline=\"hover\" key=\"1\" color=\"inherit\" id=\"breadcrumb-color\" href={ele.linkURL}>\r\n                                {t<string>(ele.transName)} </Link> :\r\n                                <Typography key=\"3\" color=\"text.primary\">{t<string>(ele.transName)}  </Typography>\r\n                        )\r\n                    ]}\r\n                </Breadcrumbs>\r\n            </Stack>\r\n            <h3 className=\"content_pageTitle\">\r\n                {t<string>(data.path[1].transName)}\r\n            </h3>\r\n        </div>\r\n    )\r\n}\r\n","import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport { Dialog, IconButton, Link } from '@mui/material';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { styled } from '@mui/system';\r\nimport EnhancedEncryptionIcon from '@mui/icons-material/EnhancedEncryption';\r\nimport PasswordProtected from '../../assets/images/svg/password-protected.svg'\r\nimport TicketRaised from '../../assets/images/svg/ticket-raised.svg'\r\nimport PasswordChanged from '../../assets/images/svg/password-changed.svg'\r\nimport CloseRoundedIcon from '@mui/icons-material/CloseRounded';\r\nimport ForgotPassword from '../forgot-password/ForgotPassword';\r\n\r\n\r\nfunction ModalPassChanged({ open, setOpen }: any) {\r\n    //console.log(modalData)\r\n    const theme = useTheme();\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down('md'));\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                fullScreen={fullScreen}\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"responsive-dialog-title\"\r\n            >\r\n                <IconButton onClick={handleClose}><CloseRoundedIcon /></IconButton>\r\n                <img src={PasswordChanged} alt=\"\" />\r\n                <DialogTitle id=\"responsive-dialog-title\" textAlign='center'>\r\n                    {\"Password Updated\"}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText textAlign='center'>\r\n                        <p className='darker-text'>Your password has been changed successfully</p>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ModalPassChanged;\r\n","import { Buffer } from 'buffer'\r\n\r\nexport function base64Encode(str: string): string {\r\n  return Buffer.from(str).toString('base64')\r\n}\r\n\r\nexport function base64Decode(str: string): string {\r\n  return Buffer.from(str, 'base64').toString()\r\n}\r\n"],"names":["ColorButton","styled","Button","color","theme","palette","getContrastText","purple","backgroundColor","height","width","borderRadius","mixBlendMode","opacity","ChangePassword","toggleTheme","dashBoardWidth","useAppSelector","state","common","useNavigate","useState","oldPassval","setOldPassVal","newPassval","setNewPassVal","cnfPass","setCnfPass","success","setSuccess","dispatch","useAppDispatch","t","useLocales","useForm","mode","resolver","yupResolver","changePasswordSchema","register","handleSubmit","formState","control","getValues","open","setOpen","className","style","marginLeft","data","breadCrums","variant","sx","fontFamily","letterSpacing","mt","flexGrow","id","paddingTop","onSubmit","d","userPassword","oldPassword","newPassword","base64Encode","newPass","username","changePassword","error","console","changePass","label","classNameInput","fieldName","typeName","onInput","variantForInput","sxForInput","border","dataTestId","setpassword","display","alignItems","position","marginTop","type","name","fontSize","lineHeight","errors","onClick","href","BreadCrums","spacing","separator","path","map","ele","underline","linkURL","transName","useTheme","fullScreen","useMediaQuery","breakpoints","down","handleClose","Dialog","onClose","IconButton","CloseRounded","src","alt","DialogTitle","textAlign","DialogContent","DialogContentText","str","Buffer","toString"],"sourceRoot":""}