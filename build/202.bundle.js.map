{"version":3,"file":"202.bundle.js","mappings":"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","sources":["webpack://tclcpasstwentyfirstoct/./src/components/modals/ModalPassChanged.tsx","webpack://tclcpasstwentyfirstoct/./src/components/change-password/ChangePassword.tsx","webpack://tclcpasstwentyfirstoct/./src/components/common/elements/BreadCrum.tsx","webpack://tclcpasstwentyfirstoct/./src/utils/Base64EncodeDecode.tsx"],"sourcesContent":["import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport { Dialog, IconButton, Link } from '@mui/material';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport { useTheme } from '@mui/material/styles';\nimport { styled } from '@mui/system';\nimport EnhancedEncryptionIcon from '@mui/icons-material/EnhancedEncryption';\nimport PasswordProtected from '../../assets/images/svg/password-protected.svg'\nimport TicketRaised from '../../assets/images/svg/ticket-raised.svg'\nimport PasswordChanged from '../../assets/images/svg/password-changed.svg'\nimport CloseRoundedIcon from '@mui/icons-material/CloseRounded';\nimport ForgotPassword from '../forgot-password/ForgotPassword';\n\n\nfunction ModalPassChanged({ open, setOpen }: any) {\n    //console.log(modalData)\n    const theme = useTheme();\n    const fullScreen = useMediaQuery(theme.breakpoints.down('md'));\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <div>\n            <Dialog\n                fullScreen={fullScreen}\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"responsive-dialog-title\"\n            >\n                <IconButton onClick={handleClose}><CloseRoundedIcon /></IconButton>\n                <img src={PasswordChanged} alt=\"\" />\n                <DialogTitle id=\"responsive-dialog-title\" textAlign='center'>\n                    {\"Password Updated\"}\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText textAlign='center'>\n                        <p className='darker-text'>Your password has been changed successfully</p>\n                    </DialogContentText>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n}\n\nexport default ModalPassChanged;\n","import { useEffect, useState } from 'react'\nimport { BreadCrums } from '../common/elements/BreadCrum'\nimport { appRoutes, breadCrums, dataTables } from '../../utils/constants'\nimport {\n    useSelector\n} from '../../redux/store'\nimport {\n    useDispatch as useAppDispatch,\n    useSelector as useAppSelector,\n} from '../../redux/store'\nimport { Password } from '../../types/authType'\nimport { changePassword, forgotPassword, resetForgotPaswordPrms } from '../../redux/slices/authSlice'\nimport { Typography } from '@mui/material'\nimport {\n    Box,\n    styled,\n    Button,\n    ButtonProps,\n    FormGroup,\n    FormControl,\n} from '@mui/material'\nimport { FormProvider } from '../hook-form'\nimport { purple } from '@mui/material/colors'\nimport useLocales from '../../hooks/useLocales'\n\nimport { PrimaryInput } from '../common/elements/PrimaryInput'\nimport { validateEmail } from '../../utils/helpers'\nimport { useForm } from 'react-hook-form'\nimport { yupResolver } from '@hookform/resolvers/yup'\nimport { changePasswordSchema, ForgotPasswordSchema } from '../../utils/yupschemas'\nimport { base64Encode } from '../../utils/Base64EncodeDecode'\nimport { useNavigate } from 'react-router-dom'\nimport ModalPassChanged from '../modals/ModalPassChanged'\n\n\n\n\n\nconst ColorButton = styled(Button)<ButtonProps>(({ theme }) => ({\n    color: theme.palette.getContrastText(purple[500]),\n    backgroundColor: purple[500],\n    height: '70px',\n    width: '100%',\n    borderRadius: '35px',\n    mixBlendMode: 'luminosity',\n    opacity: 0.5,\n    '&:hover': {\n        backgroundColor: purple[700],\n    },\n}))\n\n\nexport const ChangePassword = ({ toggleTheme }: { toggleTheme: any }) => {\n    const { dashBoardWidth } = useAppSelector((state: any) => state.common);\n    const navigate = useNavigate()\n    const [oldPassval, setOldPassVal] = useState('');\n    const [newPassval, setNewPassVal] = useState('');\n    const [cnfPass, setCnfPass] = useState('');\n    const [success, setSuccess] = useState(false)\n    const { isError, isSuccess, message, user, changeMessage } = useAppSelector(\n        (state: any) => state.auth || {}\n    )\n    const dispatch = useAppDispatch()\n    const { t } = useLocales()\n\n    // if (changeMessage === \"SUCCESS\") {\n    //     navigate(appRoutes.ACCOUNT_DETAILS)\n    // }\n    const { register, handleSubmit, formState, control, getValues } = useForm<any>({\n        mode: \"onChange\",\n        resolver: yupResolver(changePasswordSchema),\n    });\n    const changePass = (d: any) => {\n        try {\n            const userPassword: Password = {\n                oldPassword: d.oldPassword,\n                newPassword: base64Encode(d.newPass),\n                username: null\n            }\n            dispatch(changePassword(userPassword))\n            setSuccess(true)\n\n        } catch (error) {\n            console.error(error)\n        }\n    }\n\n    // if (changeMessage === \"SUCCESS\") {\n    //     navigate(appRoutes.WELCOME)\n    // }\n\n    const [open, setOpen] = useState<boolean>(false);\n\n    return (\n        <div >\n            <div className=\"dashboard__content\" style={{\n                // width: `${window.innerWidth - +`${dashBoardWidth}`.split('p')[0]}px`,\n                marginLeft: `${dashBoardWidth}`, width: `calc(100% - ${dashBoardWidth}.split('p')[0]}px`\n            }}>\n                <div className=\"content__header\">\n                    <BreadCrums data={breadCrums.CHANGE_PASSWORD} />\n                </div>\n                <Typography\n                    className=\"helper__title\"\n                    variant=\"body1\"\n                    sx={{\n                        fontFamily: 'ubuntu',\n                        letterSpacing: 0,\n                        opacity: 0.6,\n                        mt: '20px',\n                    }}\n                >\n                    {t<string>('changePasswordInstruction')}\n                </Typography>\n\n                {/* form starts here */}\n                <Box sx={{ flexGrow: 1 }} id=\"login-form\" className=\"account__form change-password-form\">\n                    <div className=\"form__inner\">\n                        <Box\n                            sx={{ flexGrow: 1, paddingTop: '0 !important' }}\n                            className=\"account__form__body\"\n                        >\n                            <FormProvider onSubmit={handleSubmit((d) => changePass(d))}>\n                                <FormGroup>\n                                    {/* Email Input feilds */}\n                                    <PrimaryInput\n                                        register={{ ...register('oldPassword') }}\n                                        label={'oldPassword'}\n                                        classNameInput={\"input-field\"}\n                                        fieldName={'user'}\n                                        formState={formState}\n                                        typeName={'password'}\n                                        onInput={setOldPassVal}\n                                        variantForInput={\"standard\"}\n                                        sxForInput={{ width: 1, borderRadius: '10px !important', border: 'none !important' }}\n                                        dataTestId='email-element'\n                                    />\n                                    <PrimaryInput\n                                        register={{ ...register('newPass') }}\n                                        label={'password'}\n                                        classNameInput={\"input-field\"}\n                                        fieldName={'newPass'}\n                                        formState={formState}\n                                        typeName={'password'}\n                                        onInput={setNewPassVal}\n                                        setpassword={true}\n                                        variantForInput={\"standard\"}\n                                        sxForInput={{ width: 1, borderRadius: '10px !important', border: 'none !important' }}\n                                        dataTestId='password-element'\n                                    />\n                                    <PrimaryInput\n                                        register={{ ...register('cnfPassword') }}\n                                        label={'confirmPassword'}\n                                        classNameInput={\"input-field\"}\n                                        fieldName={'cnfPassword'}\n                                        formState={formState}\n                                        typeName={'password'}\n                                        onInput={setCnfPass}\n                                        variantForInput={\"standard\"}\n                                        sxForInput={{ width: 1, borderRadius: '10px !important', border: 'none !important' }}\n                                        dataTestId='confirm-password-element'\n                                    />\n                                    {/* submit button */}\n                                    <FormControl\n                                        className=\"input-wrapper submitBtn\"\n                                        sx={{\n                                            display: 'flex',\n                                            alignItems: 'flex-end',\n                                            position: 'relative',\n                                            width: 1,\n                                            marginTop: '50px',\n                                        }}\n                                    >\n                                        <ColorButton\n                                            variant=\"contained\"\n                                            id=\"btn-enable-style\"\n                                            data-testid=\"button-element\"\n                                            type=\"submit\"\n                                            name=\"submit\"\n                                            sx={{\n                                                fontSize: '18px',\n                                                lineHeight: '21px',\n                                                fontFamily: 'ubuntu',\n                                                letterSpacing: '-0.72px',\n                                            }}\n                                            className={`customBtn-01 ${((newPassval != \"\") && (newPassval == cnfPass) && !formState.errors.newPass) ? 'btn-enable-style' : 'no-pointers'} `}\n                                            onClick={() => {\n                                                setOpen(true);\n                                            }}\n                                        >\n                                            {t<string>('done')}\n                                        </ColorButton>\n                                    </FormControl>\n                                </FormGroup>\n                            </FormProvider>\n                        </Box>\n                        <Button href='./'>Forgot Password?</Button>\n                    </div>\n                </Box>\n            </div>\n            {success? <ModalPassChanged open={open} setOpen={setOpen} />:\"\"}\n        </div>\n    )\n}\n\nexport default ChangePassword\n","import React, { useState } from 'react'\n\nimport Breadcrumbs from '@mui/material/Breadcrumbs'\nimport IconButton from '@mui/material/IconButton'\nimport InputBase from '@mui/material/InputBase'\nimport Link from '@mui/material/Link'\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext'\nimport Paper from '@mui/material/Paper'\nimport SearchIcon from '@mui/icons-material/Search'\nimport Stack from '@mui/material/Stack'\nimport Typography from '@mui/material/Typography'\nimport axios from \"axios\"\nimport useLocales from '../../../hooks/useLocales';\n\nexport const BreadCrums = ({ data }: { data: any }) => {\n    const { t } = useLocales();\n\n    return (\n        <div className=\"content__breadcrum\">\n            <Stack spacing={2} className=\"breadcrum-stack\">\n                <Breadcrumbs separator={<NavigateNextIcon fontSize=\"small\" />} aria-label=\"breadcrumb\" >\n                    {[\n                        data.path.map((ele: any) =>\n                            ele.type == 'link' ? <Link underline=\"hover\" key=\"1\" color=\"inherit\" id=\"breadcrumb-color\" href={ele.linkURL}>\n                                {t<string>(ele.transName)} </Link> :\n                                <Typography key=\"3\" color=\"text.primary\">{t<string>(ele.transName)}  </Typography>\n                        )\n                    ]}\n                </Breadcrumbs>\n            </Stack>\n            <h3 className=\"content_pageTitle\">\n                {t<string>(data.path[1].transName)}\n            </h3>\n        </div>\n    )\n}\n","import { Buffer } from 'buffer'\n\nexport function base64Encode(str: string): string {\n  return Buffer.from(str).toString('base64')\n}\n\nexport function base64Decode(str: string): string {\n  return Buffer.from(str, 'base64').toString()\n}\n"],"names":["open","setOpen","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","handleClose","Dialog","onClose","IconButton","onClick","CloseRounded","src","alt","DialogTitle","id","textAlign","DialogContent","DialogContentText","className","ColorButton","styled","Button","color","palette","getContrastText","purple","backgroundColor","height","width","borderRadius","mixBlendMode","opacity","ChangePassword","toggleTheme","dashBoardWidth","useAppSelector","state","common","useNavigate","useState","setOldPassVal","newPassval","setNewPassVal","cnfPass","setCnfPass","success","setSuccess","auth","dispatch","isError","isSuccess","message","user","changeMessage","useAppDispatch","t","useLocales","useForm","mode","resolver","yupResolver","changePasswordSchema","register","handleSubmit","formState","control","getValues","style","marginLeft","BreadCrum","data","breadCrums","Typography","variant","sx","fontFamily","letterSpacing","mt","Box","flexGrow","paddingTop","onSubmit","d","userPassword","oldPassword","newPassword","base64Encode","newPass","username","changePassword","error","console","changePass","FormGroup","PrimaryInput","label","classNameInput","fieldName","typeName","onInput","variantForInput","sxForInput","border","dataTestId","setpassword","FormControl","display","alignItems","position","marginTop","type","name","fontSize","lineHeight","errors","href","BreadCrums","spacing","separator","path","map","ele","underline","linkURL","transName","str","Buffer","toString"],"sourceRoot":""}